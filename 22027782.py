# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k1yY74L-ed6dgTjmRCEOqzyXD5cJQbih
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Maths.csv')

# Histogram of math scores from the maths dataset
plt.hist(df['G3'], bins=20)
plt.xlabel('G3')
plt.ylabel('Count')
plt.title('Histogram of Math Scores')
plt.savefig('math_hist.png')

import seaborn as sns

from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt
import numpy as np

# Select numerical columns from df
X_numeric = df.select_dtypes(include=[np.number])

# Also convert categoricals to dummy variables
X_numeric = pd.get_dummies(X_numeric)

# Generate cluster plot
Z = linkage(X_numeric, method='ward')
dendrogram = dendrogram(Z, labels=df.index)
plt.title("Student Cluster Dendrogram")
plt.savefig('cluster_plot.png')



# Import libraries
import matplotlib.pyplot as plt
import pandas as pd

# Load dataset
df = pd.read_csv('/content/Maths.csv')

# Create canvas and setup subplot grid
fig = plt.figure(figsize=(12, 9))
ax1 = plt.subplot2grid((12, 12), (0, 0), colspan=4, rowspan=5)
ax2 = plt.subplot2grid((12, 12), (5, 0), colspan=4)
ax3 = plt.subplot2grid((12, 12), (0, 6), colspan=6, rowspan=5)

# Plot 1: Score distribution histogram
ax1.hist(df['G3'], bins=20, color='#3b7d86')
ax1.set_ylabel('Number of Students')
ax1.set_xlabel('Test Scores')
ax1.set_title('Distribution of\nFinal Scores')

# Plot 2: Average study time
study_time = [df['studytime'].mean()]
cols = ['lightblue']
ax2.bar(range(1), study_time, color=cols)
ax2.set_ylabel('Hours')
ax2.set_title('Average Weekly\nStudy Time')

# Plot 3: Score vs Study Time Scatter Plot
ax3.scatter(df['studytime'], df['G3'], color='#dd5555', alpha=0.6)
ax3.set_title('Study Hours vs Score')
ax3.set_xlabel('Weekly Study\n Time (Hours)')

# Add illustration, text, icons, etc.

# Save infographic
plt.tight_layout()
plt.savefig('infographic.png', dpi=300)

!pip install squarify

import matplotlib.pyplot as plt

fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8,8))
titles = ["The Optimizer", "The Bare Minimum", "The Well-Rounded", "The Socializer"]
colors = ["#87E5D8", "#F2D092", "#DF9F9F", "#96DBE2"]

for ax, title, color in zip(axs.flat, titles, colors):
    ax.axis('off')
    ax.set_title(title, fontsize=18, color=color)

    # Add illustrations & icons
    ax.imshow(plt.imread('/content/student.png'))
    ax.scatter(x=[0.1, 0.5], y=[0.8, 0.3], c=color, s=[500,300])
    ax.plot([0.15, 0.15, 0.35], [0.7, 0.5, 0.5], c="white", lw=12)

    # Include data for each persona
    stats_text = "\n".join(["Data", "More Data", "Insights"])
    ax.text(0.05,0.22, stats_text, size=14, color="white")

fig.suptitle("Student Personas", fontsize=25, y=1.05)
plt.tight_layout()
plt.savefig('personas.png')

from matplotlib import pyplot as plt
import networkx as nx

G = nx.DiGraph()
G.add_nodes_from(["Study Hours", "Fun Activities", "Final Scores"])
G.add_edges_from([("Study Hours", "Final Scores"),
                  ("Fun Activities", "Final Scores"),
                 ("Study Hours", "Fun Activities")])

pos ={
    "Study Hours": (1, 0.8),
    "Fun Activities": (1, 0.2),
    "Final Scores": (0, 0.5)
}

fig, ax = plt.subplots(figsize=(7, 7))
nx.draw_networkx(G, pos, node_color="lightblue", arrowsize=20, ax=ax)

node_labels = {"Study Hours": "More\nHours",
               "Fun Activities": "More\nActivities",
               "Final Scores": "Higher\nScores"}
nx.draw_networkx_labels(G, pos, labels=node_labels, ax=ax)

plt.box(False)
plt.title("Goals Flow Chart")
plt.savefig("goals_chart.png")

import matplotlib.pyplot as plt

labels = ['Took \nPre-Exam', 'Passed \nPre-Exam', 'Took \nFinal Exam', 'Passed \nFinal Exam']
values = [200, 150, 180, 130]
colors = ['#47adad', '#568f8f', '#718787', '#5daca3']

fig, ax = plt.subplots()
ax.grid(False)

ax.set_ylim(0, 210)
ax.set_xlim(0, 8)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)

prev = 0
ys = [0, 0, 0, 0]
for i, v in enumerate(values):
    ys[i] = prev
    ax.text(2.5, prev+v/2, str(v), ha='center', va='center', fontsize=18)
    prev += v

ax.stackplot([1, 3, 5, 7], values, colors=colors, edgecolor='w')

for i, label in enumerate(labels):
    x = 2 + i*2
    y = sum(values[:i+1]) if i > 0 else 0
    ax.text(x, y, label, horizontalalignment='center',
            verticalalignment='center', fontsize=10)

ax.set_title("Exam Pass Rates Flow")
plt.tight_layout()
plt.savefig("pass_rates.png")



import squarify
import matplotlib.pyplot as plt

corr_scores = {'goout': 0.30, 'Dalc': 0.15, 'studytime': 0.85, 'schoolsup': 0.65}
values = list(corr_scores.values())
labels = list(corr_scores.keys())

norm = squarify.normalize_sizes(values, 100, 100)
rects = squarify.squarify(norm, 0, 0, 100, 100)

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

colors = ["#dd5555", "#ee8572", "#CEEDC7", "#ADEBAD"]
for rect, color in zip(rects, colors):
    ax.bar(rect['x'], rect['y'], width=rect['dx'], bottom=rect['y'], color=color)

for index, rect in enumerate(rects):
    x = rect['x'] + rect['dx'] / 2
    y = rect['y'] + rect['dy'] / 2
    label = labels[index]
    ax.text(x, y, label, ha='center', fontsize=12)

ax.set_yticks([])
ax.set_xticks([])
plt.title("Feature Correlations")
plt.tight_layout()
plt.savefig("tree_map.png", dpi=120)

import pandas as pd
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(8, 5))


bars = ax.bar(df.index, df['age'], color='#1f77b4', label='Traveltime')
bars_failures = ax.bar(df.index, df['traveltime'], color='#ff7f0e', label='Age', alpha=0.5)
for bar, value in zip(bars, df['studytime']):
    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, str(value), ha='center', va='bottom')

for bar, value in zip(bars_failures, df['failures']):
    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, str(value), ha='center', va='bottom')

# Customize the plot
ax.set_title('Age and traveltime Infographic')
ax.set_xlabel('Traveltime')
ax.set_ylabel('Age')
ax.legend()

# Save the plot
plt.savefig("study_time_failures_infographic.png", bbox_inches='tight', dpi=120)